<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Games on torkleyy&#39;s blog</title>
    <link>https://torkleyy.github.io/tags/games/</link>
    <description>Recent content in Games on torkleyy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2017 Thomas Schaller</copyright>
    <lastBuildDate>Tue, 18 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://torkleyy.github.io/tags/games/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Designing asset management in Amethyst</title>
      <link>https://torkleyy.github.io/blog/amethyst-assets/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://torkleyy.github.io/blog/amethyst-assets/</guid>
      <description>About two months ago, I decided to get started with Amethyst, a data-driven game engine written in Rust. However, I didn&amp;rsquo;t quite like the asset management, especially because it blocks the main thread. In this blog post, I describe how I designed the asset management for Amethyst.
First experiments At first, I thought let&amp;rsquo;s try out these very promising futures. However, it turned out they weren&amp;rsquo;t as ergonomic as they seemed to be.</description>
    </item>
    
  </channel>
</rss>